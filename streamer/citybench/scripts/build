#!/usr/bin/python

from string import Template
from sys import argv
import uuid
import os

machine=os.environ['MACHINE']
run_uuid=str(uuid.uuid1())
host="localhost"
base_url="http://172.17.0.1:8080/openrdf-sesame/repositories"
base_port=4000
base_ws_port=4040

def stream_type(stream):
    traffic="Traffic"
    pollution="Pollution"
    parking="Parking"

    stype = pollution if  pollution in stream else stream
    stype = parking if  parking in stream else stype
    stype = traffic if  traffic in stream else stype

    return stype.lower()
#end


def add_stream_to_compose(s, n):
    with open("./docker-compose.yml", "a") as compose_file: 
        comp = Template(open('./scripts/triplewave.tmpl').read())
        compose_map = {
              "stream_name":s.lower(), "stream":s, "stream_type":stream_type(s),
              "uuid":str(uuid.uuid4()), "run_uuid":run_uuid,
              "ws_port":(base_ws_port+n),  "port":(base_port+n) }
        compose_file.write(comp.substitute(compose_map))
        compose_file.write('\n')
    compose_file.close()
#end


def save_properties(stream, number):
    with open("./running/"+stream+".properties", "w") as prop_file:
        prop = Template(open('./scripts/properties.tmpl').read())
	scale_factor=1

	if "_" in stream:
	    scale_factor = stream.split("_")[1]
	    stream = stream.split("_")[0]

	prop_map = { "stream":stream,"stream_type":stream_type(stream),
            "host":host, "port":(base_port+number),
            "ws_loc":"primus", "ws_port":(base_ws_port+number), 
            "base_url":base_url, "scale_factor":scale_factor, "run_uuid":run_uuid }
        prop_file.write(prop.substitute(prop_map))
        prop_file.close()
#end

def streams(argv):
    stream_number = 0
    if os.path.isfile("./scripts/docker-compose.yml"):
        with open("./scripts/docker-compose.yml", "a") as compose_file: 
            compose_file.seek(0)
            compose_file.truncate()
            compose_file.close()

    # with open("./docker-compose.yml", "a") as compose_file:
    #     cad = Template(open('./scripts/cadvisor.tmpl').read())
    #     compose_file.write(cad.substitute({'run_uuid':run_uuid, "machine":"cadvisor_running"}))
    #     compose_file.write('\n')
    #     compose_file.close()

    for i in range(1,len(argv)):
        save_properties(argv[i], stream_number)
        add_stream_to_compose(argv[i], stream_number)
        stream_number  +=1

if len(argv) > 1 and argv[1] == '-q':
    query_streams = [argv[2]]
    with open(argv[2]) as input_file:
        for i, s in enumerate(input_file):
           query_streams.append(s.strip())
        input_file.close()
    streams(query_streams)
else:
    streams(argv)
