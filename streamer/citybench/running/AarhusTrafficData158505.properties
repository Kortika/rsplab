###############################################################################
########################### REPOSITORY  ###############################
###############################################################################

server.name=AarhusTrafficData158505
server.port=8080
ontop.properties=./postgres.properties
ontop.owl=./obda/experiments/citybench.owl
ontop.obda=./obda/experiments/AarhusTrafficData158505.obda


###############################################################################
########################### Metadata            ###############################
###############################################################################

stream_name=AarhusTrafficData158505
payload=payload.jsonld
run_uuid=c4f3da51-a84e-11e7-b050-1a00a83a5601

###############################################################################
########################### Required  Resources ###############################
###############################################################################

resources_path= ./resources
sgraph=traffic.sgraph

###############################################################################
########################### Network   #########################################
###############################################################################

# host
hostname=localhost
# triplewave port
port=4000

# root path
path=

# endpoint for the websocket
ws_stream_location=/primus
ws_port=4040

# where is possobile to connect to the wesbsocket (should match you apache / ngix configuration)
ws_address=ws://localhost:4040/primus

###############################################################################
########################### MODE    ###########################################
###############################################################################

# transform: transform a web stream in rdf
# replay: streamify a rdf dataset retrieved from a sparql endpoint
# endless: similar to the replay, it substitute the original timestamps with the current (need better explaination)
# endless_profiled: the triples are returned with a custom flow rate profile defined by a profiled function

#sparql endpoint URI

mode=replay

# From
rdf_query_endpoint=http://data_server:8080/AarhusTrafficData158505/sparql

# Enable External Stream Registration
delayed=true

# Enable Querying to External SPARQL Endpoint
rdf_remote=true

profiling_function=dataBased
scale_factor=1

# if false 
# path to the file
# rdf_file=../rdf/data.1.ttl
# rdf_update_endpoint=http://localhost:3030/ds/update
# rdf_insert_new_triple=../rdf/insertNewTriple.q
# rdf_insert_query=../rdf/insertQuery.q

###############################################################################
########################### Sources ###########################################
###############################################################################
# define the format of the input file
# the supported fromat are triples, quads, rdfstream
# triples: No concepts of named graphs, but stream of the form (<s,p,o>,ts), conceptually no fixed schema
# rdfstream: Relies on Named Graphs, Ordering relation is on named graphs, 
# stream: No Concept of Named Graph, Required Stream Schema and ordering relation for the triples
sources=stream

###########################
# source = stream   #######
###########################

# retrieve the graph from the source according with the source definition
# rdf_query_get_content = is a query that specifies how to construct the stream
# rdf_stream_item_content_pattern= specifies the ordering relation

###########################
# source = triples      ###
###########################

# rdf_query_get_content=getGraphConent.q
# rdf_stream_item_content_pattern= specifies the ordering relation

###########################
# source = rdfstream    ###
###########################

# rdfstream_file=examples/rdfstream/stream.rs
